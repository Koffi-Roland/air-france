kind: ServiceAccount
apiVersion: v1
metadata:
  name: neo4j-pod-labeling
  namespace: repind

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: neo4j-pod-labeling
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "update", "list", "patch"]

---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: neo4j-pod-labeling
subjects:
- kind: ServiceAccount
  name: neo4j-pod-labeling
  namespace: repind
roleRef:
  kind: Role
  name: neo4j-pod-labeling
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: neo4j-core-auto-labeling
  namespace: repind
spec:
  replicas: 1
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: deployment-neo4j-neo4j-core-auto-labeling
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        workload.user.cattle.io/workloadselector: deployment-neo4j-neo4j-core-auto-labeling
    spec:
      containers:
      - env:
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              key: neo4j-password
              name: neo4j-secrets
              optional: false
        image: lachlanevenson/k8s-kubectl:v1.12.7
        imagePullPolicy: IfNotPresent
        name: neo4j-core-auto-labeling
        resources: {}
        securityContext:
          capabilities: {}
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        command:
          - "sh"
          - "-c"
        args:
          - |
            while true; do
              PODS=$(kubectl get pods -l app=neo4j -l component=core --namespace=repind --output=jsonpath={.items..metadata.name})
              AUTH="neo4j:$NEO4J_PASSWORD"
              printf "Leader hunt result: "
              for POD in $PODS; do
                SERVER=$(kubectl get pods $POD --namespace=repind --output=jsonpath={.status.podIP})
                LEADER=$(wget -qO- http://$AUTH@$SERVER:7474/db/manage/server/core/writable 2> /dev/null)
                if [[ "$LEADER" == "true" ]]; then
                  printf "$POD"
                else
                  LEADER=false
                fi
                kubectl label pods $POD writeable=$LEADER --overwrite &> /dev/null
              done
              printf "\n"
              sleep 30
            done
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: neo4j-pod-labeling
      terminationGracePeriodSeconds: 30

---

apiVersion: v1
kind: Service
metadata:
  name: neo4jbrowser
  namespace: repind
spec:
  type: NodePort
  ports:
  - name: http
    port: 7474
    nodePort: 30092
  - name: bolt
    port: 7687
    nodePort: 30093
  selector:
    app: neo4j
    component: core
    release: stable
    writeable: "true"