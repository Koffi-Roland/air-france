meta {
  name: Get secret
  type: http
  seq: 1
}

get {
  url: {{vault-url}}/v1/repind/secrets/data/{{vault-space-database}}
  body: none
  auth: none
}

headers {
  X-Vault-Token: {{client_token}}
}

vars:pre-request {
  MS: skip
}

script:pre-request {
  const vaultSpaceDatabase = {
    'DEV': 'dev/microServices',
    'RCT': 'dev/microServices',
    'QAL': 'qal/microServices',
    'PRD': 'prod/microServices'
  }
  const vaultUrl = {
     'DEV': 'https://vault-tls-cae.airfranceklm.com',
    'RCT': 'https://vault-tls-cae.airfranceklm.com',
    'QAL': 'https://vault-tls-cae.airfranceklm.com',
    'PRD': 'https://vault-tls.airfranceklm.com'
  }
  
  const response = await axios.post(
    vaultUrl[currentEnv] + '/v1/auth/approle/login', 
    {
      role_id: bru.getEnvVar("vault-role-id"),
      secret_id: bru.getEnvVar("vault-secret-id")
    },
    {
      headers: {'X-Vault-Namespace': 'repind'}
    });
  console.log('response', response);
  bru.setVar("client_token", response.data.auth.client_token);
  bru.setVar("vault-space-database", vaultSpaceDatabase[currentEnv]);
  bru.setVar("vault-url", vaultUrl[currentEnv]);
  
}

script:post-response {
  const vault = bru.getVar('vault') || {};
  const currentEnv = bru.getEnvVar("env");
  if(!vault[currentEnv]) {
    vault[currentEnv] = res.body.data.data;
    bru.setVar('vault', vault);
  }
}
