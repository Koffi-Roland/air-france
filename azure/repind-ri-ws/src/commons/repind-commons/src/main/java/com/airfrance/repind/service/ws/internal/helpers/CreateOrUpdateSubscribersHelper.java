package com.airfrance.repind.service.ws.internal.helpers;

import com.airfrance.ref.exception.ContractExistException;
import com.airfrance.ref.exception.InvalidParameterException;
import com.airfrance.ref.exception.MissingParameterException;
import com.airfrance.ref.exception.jraf.JrafDomainException;
import com.airfrance.ref.exception.jraf.JrafDomainNoRollbackException;
import com.airfrance.ref.exception.jraf.JrafDomainRollbackException;
import com.airfrance.ref.type.ContractDataKeyEnum;
import com.airfrance.repind.dto.individu.ContractDataDTO;
import com.airfrance.repind.dto.individu.ContractV2DTO;
import com.airfrance.repind.dto.individu.SignatureDTO;
import com.airfrance.repind.dto.role.BusinessRoleDTO;
import com.airfrance.repind.dto.role.RoleContratsDTO;
import com.airfrance.repind.dto.ws.RequestorDTO;
import com.airfrance.repind.dto.ws.createupdaterolecontract.v1.CreateUpdateRoleContractRequestDTO;
import com.airfrance.repind.service.role.internal.RoleDS;
import com.airfrance.repind.util.SicStringUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;

@Service("createOrUpdateSubscribersHelper")
public class CreateOrUpdateSubscribersHelper {

	/**
	 * Logger
	 */
	private static final Logger LOG = LoggerFactory.getLogger(CreateOrUpdateSubscribersHelper.class);
	
	@Autowired
	private RoleDS roleDS;
	
	public void setRoleDS(RoleDS roleDS) {
		this.roleDS = roleDS;
	}
	
	/**
	 * Entry point for Creation, Update or Deletion for subscribers, using the request from the w001567 WS.
	 * @param request {@link CreateUpdateRoleContractRequest} to treat
	 * @return If creation or update succeed, it returns the contract number.<br>
	 * If deletion is a success, it returns an empty String.<br>
	 * Else it returns a null object.
	 * @throws JrafDomainException
	 */
	@Transactional(rollbackFor = JrafDomainRollbackException.class)
	public String createUpdateDeleteSubscribersHelper(CreateUpdateRoleContractRequestDTO request) throws JrafDomainException {

		RoleContratsDTO rcDto = transformRequestToRoleContrats(request);
		SignatureDTO signDto = createSignatureFromRequestor(request.getRequestor());
		String numContract = null;
		// If creation then createRoleContract and associated business rules
		if ("C".equalsIgnoreCase(request.getActionCode())) {
			numContract = createRoleContract(rcDto, signDto);
			// If update then updateRoleContract and associated business rules
		} else if ("U".equalsIgnoreCase(request.getActionCode())) {
			numContract = updateRoleContract(rcDto, signDto);
			// If delete, then deleteRoleContract and associated business role
		} else if ("D".equalsIgnoreCase(request.getActionCode())) {
			numContract = deleteRoleContract(rcDto.getNumeroContrat()).toString();
		} else {
			LOG.error("invalid actionCode (values are C, U or D)");
			throw new InvalidParameterException("invalid actionCode (values are C, U or D)");
		}
		return numContract;
	}

	/**
	 * New contract creation. No control are done, database insertion (GIN and contractNumber are mandatories)
	 * @param rcDTO {@link RoleContratsDTO} the contract to add
	 * @param signDTO {@link SignatureDTO} the contract signature for creation
	 * @return {@link String} the contract number key (srin) generated by database
	 * @throws JrafDomainException
	 */
	public String createRoleContract(RoleContratsDTO rcDTO, SignatureDTO signDTO) throws JrafDomainException {
		// Checks if Gin is set
		checkRoleContract(rcDTO.getGin(), "GIN");
		// Checks if contractNumber is set
		checkRoleContract(rcDTO.getNumeroContrat(), "contractNumber");
		RoleContratsDTO existing = roleDS.findRoleContractByNumContract(rcDTO.getNumeroContrat());
		// if role contract exist, return an ContractExistException
		if (existing != null) {
			LOG.error("This contract " + existing.getNumeroContrat() + " cannot be created, because it already exists in database");
			throw new ContractExistException("");
		}
		
		// Signature Creation
		rcDTO.setDateCreation(signDTO.getDate());
		rcDTO.setSignatureCreation(signDTO.getSignature());
		rcDTO.setSiteCreation(signDTO.getSite());
		rcDTO.setDateModification(signDTO.getDate());
		rcDTO.setSignatureModification(signDTO.getSignature());
		rcDTO.setSiteModification(signDTO.getSite());
		rcDTO.getBusinessroledto().setDateCreation(signDTO.getDate());
		rcDTO.getBusinessroledto().setSignatureCreation(signDTO.getSignature());
		rcDTO.getBusinessroledto().setSiteCreation(signDTO.getSite());
		rcDTO.getBusinessroledto().setDateModification(signDTO.getDate());
		rcDTO.getBusinessroledto().setSignatureModification(signDTO.getSignature());
		rcDTO.getBusinessroledto().setSiteModification(signDTO.getSite());
		
		// Create the role Contract (including the businessRoleDTO)
		return roleDS.createRoleContractForSubscribers(rcDTO);
	}	

	/**
	 * Update a role contract following the parameter.<br>
	 * <br>
	 * contractType, subType (if exists) and contractNumber are mandatories values. <br>
	 * <br> If an update is asked to be done on a GIN which is not the one set in RI:
	 * <ul>
	 * <li>Initial contract is physically removed from database</li>
	 * <li>The contract is created on the new GIN</li>
	 * </ul>
	 * If an update is asked to be done on a GIN which does not exist an 001 error is sent. <br>
	 * 
	 * @param rcDTO
	 * @param signDTO
	 * @return
	 * @throws JrafDomainException
	 */
	@Transactional(rollbackFor = JrafDomainRollbackException.class, noRollbackFor = JrafDomainNoRollbackException.class)
	public String updateRoleContract(RoleContratsDTO rcDTO, SignatureDTO signDTO) throws JrafDomainException {
		
		RoleContratsDTO existing = roleDS.findRoleContractByNumContract(rcDTO.getNumeroContrat());
		if (existing == null) {
			return createRoleContract(rcDTO, signDTO);
		}

		// Checks if Gin is set
		// Checks if contractNumber is set
		checkRoleContract(rcDTO.getNumeroContrat(), "contractNumber");
		// If gin for contract to update is not the same than the exisiting one then
		if (existing.getGin() != null && !rcDTO.getGin().equals(existing.getGin())) {
			// Delete existing contract
			roleDS.deleteRoleContractForSubscribers(existing);
			// Create role contract
			return createRoleContract(rcDTO, signDTO);
		} else {
			// Set BusinessRoleDTO
			
			rcDTO.setSrin(existing.getSrin());
			rcDTO.setGin(existing.getGin());
			rcDTO.setCleRole(existing.getCleRole());

			rcDTO.setBusinessroledto(existing.getBusinessroledto());
			rcDTO.setIndividudto(existing.getIndividudto());
			rcDTO.setDateCreation(existing.getDateCreation());
			rcDTO.setSignatureCreation(existing.getSignatureCreation());
			rcDTO.setSiteCreation(existing.getSiteCreation());
			rcDTO.setDateModification(signDTO.getDate());
			rcDTO.setSignatureModification(signDTO.getSignature());
			rcDTO.setSiteModification(signDTO.getSite());
			rcDTO.getBusinessroledto().setDateModification(signDTO.getDate());
			rcDTO.getBusinessroledto().setSignatureModification(signDTO.getSignature());
			rcDTO.getBusinessroledto().setSiteModification(signDTO.getSite());
			
			// Update
			return roleDS.updateRoleContractForSubscribers(rcDTO);
		}
	}
	
	/**
	 * Delete a role contract using its contract number.
	 * @param numContract the contract to delete
	 * @return 
	 * @throws JrafDomainException
	 */
	public Boolean deleteRoleContract(String numContract) throws JrafDomainException {
		checkRoleContract(numContract, "contractNumber");
		RoleContratsDTO existing = roleDS.findRoleContractByNumContract(numContract);
		if (existing != null) {
			roleDS.deleteRoleContractForSubscribers(existing);
			return true;
		}
		return false;
	}
	
	/**
	 * Transform the input request to a new RoleContratsDTO
	 * @param request
	 * @return {@link RoleContratsDTO}
	 */
	protected RoleContratsDTO transformRequestToRoleContrats(CreateUpdateRoleContractRequestDTO request) {

		RoleContratsDTO rcDto = null;
		if (request != null && request.getContractRequest() != null
				&& request.getContractRequest().getContract() != null) {
			ContractV2DTO cr = request.getContractRequest().getContract();
			// Create Role Contract DTO to createOrUpdate
			BusinessRoleDTO brDto = new BusinessRoleDTO();
			rcDto = new RoleContratsDTO();
			rcDto.setGin(request.getGin());
			rcDto.setCodeCompagnie(cr.getCompanyCode());
			String numContract = SicStringUtils.addingZeroToTheLeft(cr.getContractNumber(), 12);
			
			rcDto.setNumeroContrat(numContract);
			rcDto.setEtat(cr.getContractStatus());
			rcDto.setTypeContrat(cr.getProductType());
			rcDto.setSousType(cr.getProductSubType());
			rcDto.setDateDebutValidite(cr.getValidityStartDate());
			rcDto.setDateFinValidite(cr.getValidityEndDate());
			rcDto.setAgenceIATA(cr.getIataCode());
			rcDto.setIata(cr.getIataCode());
			brDto.setType("C");
			brDto.setGinInd(request.getGin());
			brDto.setNumeroContrat(numContract);

			if (request.getContractRequest().getContractData() != null && !request.getContractRequest().getContractData().isEmpty()) {
				for (ContractDataDTO cd : request.getContractRequest().getContractData()) {
					switch (ContractDataKeyEnum.getEnumByKey(cd.getKey())) {
					case PRODUCTFAMILY:
						rcDto.setFamilleProduit(cd.getValue());
						break;
					case QUALIFYINGHISTMILES:
						rcDto.setMilesQualifPrec(Integer.valueOf(cd.getValue()));
						break;
					case QUALIFYINGHISTSEGMENTS:
						rcDto.setSegmentsQualifPrec(Integer.valueOf(cd.getValue()));
						break;
					case BONUSPERMISSION:
						rcDto.setPermissionPrime(cd.getValue());
						break;
					case ADHESIONSOURCE:
						rcDto.setSourceAdhesion(cd.getValue());
						break;
					case TREATMENTFAMILY:
						rcDto.setFamilleTraitement(cd.getValue());
						break;
					case ORIGINCOMPANY:
					case PREFERREDAIRPORT:
					default:
						break;
					}
				}
			}
			rcDto.setBusinessroledto(brDto);
		}
		
		return rcDto;
	}
	
	/**
	 * Create SignatureDTO from requestor
	 * @param requestor
	 * @return
	 */
	private SignatureDTO createSignatureFromRequestor(RequestorDTO requestor) {
		SignatureDTO sign = new SignatureDTO();

		sign.setSite(requestor.getSite());
		sign.setDate(new Date());
		sign.setSignature(requestor.getSignature());
		
		return sign;
	}
	
	/**
	 * Checking number contract
	 * 
	 * @param mandatoryField field to test
	 * @param fieldName field name
	 * @throws MissingParameterException
	 */
	private void checkRoleContract(String mandatoryField, String fieldName) throws MissingParameterException {
		if (StringUtils.isBlank(mandatoryField)) {
			LOG.error("Missing Parameter : " + fieldName + " is Mandatory");
			throw new MissingParameterException(fieldName + " is Mandatory");
		}
	}
}
